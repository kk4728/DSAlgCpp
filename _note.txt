







Ch02 程序性能分析

	2.3.4 步数
		程序步：一个语法或语义上的程序段，该片段的执行时间独立于实例特征。 在不同的程序中，程序步所定义的意义可能不同
		可以通过定义一个初始值为0的全局变量，把这个变量嵌入到程序中去。

		如果不想嵌入stepCount增值语句，可以建立一张表，列出每条语句的总步数。所以，首先要确定每条语句每次执行所需要的步数(s/e,steps per execution),
		以及该语句总的执行次数(频率)，然后两者相乘即是该条语句的总步数，最后把所有总步数加起来就是整个程序的步数，该方法称为剖析法。

		最好、最坏、平均操作计数

Ch03 渐进记法
	
	3.2渐近记法
		3.2.1 大O
		
	3.5 实际复杂度
		程序性能判断，一般采用足够大的实例特征来判断(极限)->∞，但对于足够大，我们始终需要关注它的意义。在对两个程序进行取舍时，必须清楚实例特征n是否真的足够大。
		即，指数复杂度不一定就比平方数运行的慢，取决于n的取值范围。
		一个函数的复杂度如果是高次多项式，必须限制使用。否则当n足够大时，程序运行时间过长，该函数就没有了意义。

Ch04 性能测试
	程序性能不仅依赖于操作类型和数量，也依赖数据和指令的内存模式。计算机内存是有等级之分的，例如寄存器 > L1高速缓存 > L2高速缓存 > 主存
	
	4.1 引言
		在windows中，时间优化可使用 #progma optimize("t", on)
	4.4 实验设计
		C++中并没有计算函数时间精度的函数，clock()获取函数运行时系统滴答数，如果精度不够，可以通过多次运行同样次数的实例特征，积累一定的可测量的时间。然后去掉包含实例特征函数
		再次测试时间，两者相减即得到包含实例特征函数的时间复杂度度量值。当然，也可采用高精度的计时器，但如果函数运行实在太快，还是会遇到这个问题。
		最好不要采用以下方法来测试时间；
		elapseTime = 0;
		n=0;
		do 
		{
			n++;
			startTime = clock();
			dosomething();
			elapseTime += clock() - startTime;
		}while(elapseTime < 1000);
		因为如果dosomething()运行较快，两次clock()函数得到的是同一个时钟滴答数，导致本累加差值为0，计算不准确。(系统时钟滴答精度不高造成的)

		而要采用以下方式:
		n=0;
		startTime=clock();
		do
		{
			n++;
			dosomething();
			
		}while(clock() - startTime < 1000);

Ch05 线性表-数组描述
	5.1 数据对象和数据结构
		数据对象是一个实例，要么是一个不可再分的“原子”，要么是另一个数据对象实例的成员符合而成，后一种情形中，用元素来表示这些成员
		数据结构：是一个数据对象，同时这个对象实例以及构成实例的元素都存在着联系，且这些联系由相关函数来描述
	
	5.2 线性表数据结构
		具体类是没有纯虚函数的类
		一个抽象类的派生类，只有实现了抽象类中所有纯虚函数才是具体类，否则依然是抽象类而不能实例化。

	5.3 数组描述
		线性表中位置与元素之间的关系为：location(i) = i
		如果从右端开始储存：location(i) = (location(0) + i) % arrayLength

		如果是通过数组来创建数据类型linearList，必须首先选择数组element的类型和数组长度。其中类型通过c++模板来解决，而长度的化通过预估值初始化，不够再动态改变。
		当数组满而需要更大长度的数组时，数组常常是要加倍的。这个称为数组倍增，倍增时间从渐进意义上考量的话，不会大于元素插入的总时间

	5.4 定理：
		如果按一个乘法因子来增加数组的长度,则实施一系列线性表操作所需的时间与不用改变数组长度时相比，至多增加一个常数因子的复杂度。

Ch06 线性表 - 链式描述
	在基于数组的描述中，元素的地址是由数学公式决定的；location(i) = i  内存地址连续分配，有规则排序
	在基于链式描述中，元素的地址是随机分配的。

	6.1 单向描述
		元素可能需要深度拷贝
		迭代器应该是向前迭代器
		typedef std::forward_iterator_tag iterator_category;
		typedef T value_type;
		typedef ptrdiff_t difference_type;
		typedef T* pointer;
		typedef T& reference;

		iterator& operator++();
		iterator operator++(int)

		扩展的抽象数据类型

	6.5 几种排序
		6.5.1 箱子排序
			以空间换取速度，将同类型的元素放在一个箱子中，然后将各个非空箱子用链表连接起来。

		稳定排序：如果一个排序方法能够保持元素之间的相对次序，则该方法称为稳定排序。(相对次序：相对数据源)
		6.5.2 基数排序
			以箱子排序为基础，对整型变量按数字进行拆分，从低位到高位依次进行箱子排序。
			对于基数r，基数：r个待排序的整数。
			x%r, (x%r*r)/r, (x%r*r)/r;...
			当使用基数r=n,对0~pow(n,c)-1范围内的n个整数进行分解时，每个数可以分解出c个数字。

		6.5.3 凸包


Ch07 数组和矩阵
	7.1 C++中数组
		定义k维数组：
		T [i1][i2][i3]...[ik]  起始地址:start
		数组元素个数：i1 * i2 * i3 ...*ik
		占用空间: k * sizeof(T)
		从地址start，至 start + k*sizeof(T)-1 (考虑内存补齐、对齐)

		行主映射和列主映射
			在行主映射中
				一维数组：map(ik) = ik;
				二维数组：map(i, j) = i*col + j; col为数组列数
				三维数组：map(i, j, k) = i*u2*u3 + j*u3 + k ; T [u1][u2][u3]
				k维数组： map(i1,i2,i3...ik) = i1*(u2*u3...uk) +i2*(u3*...uk) + ....+ik;

		注意：c++中，行主映射快、还是列主映射快，这取决于先用一维映射定位指针，再用指针定位元素快，还是用二维映射函数定位的快。?

		对于不规则的二维数组，需要采用动态的方式才能申请。之后记得释放内存
			T** pp = new T*[size];
			for(int i=0; i<size; i++)
				*(pp+i) = new T[x];//x位具体长度

			//delete
			for(int i=0; i<size; i++
				delete [] *(pp+i);//不能使 delete [] (pp+i); pp是二重指针
			delete [] pp;







